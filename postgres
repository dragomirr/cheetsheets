# get privileges for table
SELECT grantee, privilege_type 
FROM information_schema.role_table_grants 
WHERE table_name='mytable'
# or
SELECT grantee, string_agg(privilege_type, ', ') AS privileges
FROM information_schema.role_table_grants 
WHERE table_name='mytable'   
GROUP BY grantee;
#  display all privileges for role
select *  FROM information_schema.table_privileges where grantee = 'newrole';
# transaction that inserted the row (xmin) and transaction that deleted the row (xmax)
select xmin, xmax, domainid from domain;

### describe table

select column_name, data_type, character_maximum_length
from INFORMATION_SCHEMA.COLUMNS where table_name = '<name of table>';

### blocking pids. postgres >= 9.6
select pid, 
       usename, 
       pg_blocking_pids(pid) as blocked_by, 
       query as blocked_query
from pg_stat_activity
where cardinality(pg_blocking_pids(pid)) > 0;

### cancel query

pg_cancel_backend( pid ) # The process ID (PID) of the query to be canceled. You cannot cancel a query by specifying a query ID; you must specify the query's process ID. Requires an integer value.

### terminate session

pg_terminate_backend( pid ) # The process ID of the session to be terminated. Requires an integer value.
